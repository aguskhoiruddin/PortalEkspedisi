<?php

/**
 * This is the model base class for the table "lep_comment".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "LepComment".
 *
 * Columns in table "lep_comment" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $comment_id
 * @property integer $res_id
 * @property integer $user_id
 * @property string $comment
 * @property string $status
 * @property string $created_at
 * @property string $subject
 * @property string $rating
 *
 */
abstract class BaseLepComment extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'lep_comment';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'LepComment|LepComments', $n);
	}

	public static function representingColumn() {
		return 'comment';
	}

	public function rules() {
		return array(
			array('comment, created_at', 'required'),
			array('res_id, user_id', 'numerical', 'integerOnly'=>true),
			array('status', 'length', 'max'=>1),
			array('created_at', 'length', 'max'=>10),
			array('subject, rating', 'length', 'max'=>255),
			array('res_id, user_id, status, subject, rating', 'default', 'setOnEmpty' => true, 'value' => null),
			array('comment_id, res_id, user_id, comment, status, created_at, subject, rating', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'comment_id' => Yii::t('app', 'Comment'),
			'res_id' => Yii::t('app', 'Res'),
			'user_id' => Yii::t('app', 'User'),
			'comment' => Yii::t('app', 'Comment'),
			'status' => Yii::t('app', 'Status'),
			'created_at' => Yii::t('app', 'Created At'),
			'subject' => Yii::t('app', 'Subject'),
			'rating' => Yii::t('app', 'Rating'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('comment_id', $this->comment_id, true);
		$criteria->compare('res_id', $this->res_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('subject', $this->subject, true);
		$criteria->compare('rating', $this->rating, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}